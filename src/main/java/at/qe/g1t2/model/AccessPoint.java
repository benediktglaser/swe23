package at.qe.g1t2.model;

import jakarta.persistence.*;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;
import org.springframework.data.domain.Persistable;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;

/**
 * Entity presenting a AccessPoint.
 *
 * The Id is being autogenerated and has a UUID datatype. This class serves the purpose of managing the intersection between
 * SensorStations and Webserver.
 */

@Entity
public class AccessPoint implements Persistable<UUID>, Serializable, Comparable<AccessPoint> {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @Temporal(TemporalType.TIMESTAMP)
    private LocalDateTime createDate;

    @OneToMany(mappedBy = "accessPoint",fetch=FetchType.EAGER,cascade = CascadeType.MERGE)
    @OnDelete(action = OnDeleteAction.CASCADE)
    private Set<SensorStation> sensorData = new HashSet<>();

    private String accessPointName;

    public UUID getAccessPointID() {
        return id;
    }

    public void setAccessPointID(UUID accessPointID) {
        this.id = accessPointID;
    }

    public String getAccessPointName() {
        return accessPointName;
    }

    public void setAccessPointName(String accessPointName) {
        this.accessPointName = accessPointName;
    }

    public LocalDateTime getCreateDate() {
        return createDate;
    }

    public void setCreateDate(LocalDateTime createDate) {
        this.createDate = createDate;
    }

    public Set<SensorStation> getSensorData() {
        return sensorData;
    }

    public void setSensorData(Set<SensorStation> sensorData) {
        this.sensorData = sensorData;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AccessPoint that = (AccessPoint) o;
        return Objects.equals(id, that.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public UUID getId() {return getAccessPointID();}

    public void setId(UUID id){ this.id = id;}

    @Override
    public boolean isNew() { return (null == createDate);}

    @Override
    public int compareTo(AccessPoint o) {return this.id.toString().compareTo(Objects.requireNonNull(o.getId()).toString());}


}