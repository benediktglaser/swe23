package at.qe.g1t2.model;

import jakarta.persistence.*;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;
import org.hibernate.envers.AuditJoinTable;
import org.hibernate.envers.Audited;
import org.springframework.data.domain.Persistable;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Entity presenting a AccessPoint.
 * <p>
 * The ID is being autogenerated and has a UUID datatype. This class serves the purpose of managing the intersection between
 * SensorStations and Webserver.
 */

@Entity
@Audited
public class AccessPoint implements Persistable<String>, Serializable, Comparable<AccessPoint> {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private String id;

    private String password;
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private AccessPointRole accessPointRole;
    @Temporal(TemporalType.TIMESTAMP)
    @Column(nullable = false)
    private LocalDateTime createDate;

    private LocalDateTime lastConnectedDate;
    private Boolean connected;
    private Boolean enabled;
    private Double sendingInterval;

    private Double thresholdInterval;

    private Boolean coupleMode;
    @Temporal(TemporalType.TIMESTAMP)
    private LocalDateTime updateDate;
    @OneToMany(mappedBy = "accessPoint", fetch = FetchType.EAGER, cascade = CascadeType.MERGE)
    @OnDelete(action = OnDeleteAction.CASCADE)
    @AuditJoinTable
    private List<SensorStation> sensorStation = new ArrayList<>();
    private String accessPointName;

    public Boolean getCoupleMode() {
        return coupleMode;
    }

    public void setCoupleMode(Boolean coupleMode) {
        this.coupleMode = coupleMode;
    }

    public LocalDateTime getLastConnectedDate() {
        return lastConnectedDate;
    }

    public void setLastConnectedDate(LocalDateTime lastConnectedDate) {
        this.lastConnectedDate = lastConnectedDate;
    }

    public LocalDateTime getUpdateDate() {
        return updateDate;
    }

    public void setUpdateDate(LocalDateTime updateDate) {
        this.updateDate = updateDate;
    }

    public Double getSendingInterval() {
        return sendingInterval;
    }

    public void setSendingInterval(Double interval) {
        this.sendingInterval = interval;
    }

    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public Boolean getConnected() {
        connected =lastConnectedDate != null && LocalDateTime.now().minusSeconds(sendingInterval.longValue() + (thresholdInterval ==null?0:thresholdInterval.longValue())).isBefore(lastConnectedDate);
        return connected;
    }

    public void setConnected(Boolean connected) {
        this.connected = connected;
    }

    public List<SensorStation> getSensorStation() {
        return sensorStation;
    }

    public void setSensorStation(List<SensorStation> sensorStation) {
        this.sensorStation = sensorStation;
    }

    public String getAccessPointID() {
        return id;
    }

    public void setAccessPointID(String accessPointID) {
        this.id = accessPointID;
    }

    public String getAccessPointName() {
        return accessPointName;
    }

    public void setAccessPointName(String accessPointName) {
        this.accessPointName = accessPointName;
    }

    public LocalDateTime getCreateDate() {
        return createDate;
    }

    public void setCreateDate(LocalDateTime createDate) {
        this.createDate = createDate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AccessPoint that = (AccessPoint) o;
        return Objects.equals(id, that.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public String getId() {
        return getAccessPointID();
    }

    public void setId(String id) {
        this.id = id;
    }

    @Override
    public boolean isNew() {
        return (null == createDate);
    }

    @Override
    public int compareTo(AccessPoint o) {
        return this.id.compareTo(Objects.requireNonNull(o.getId()));
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public AccessPointRole getAccessPointRole() {
        return accessPointRole;
    }

    public void setAccessPointRole(AccessPointRole accessPointRole) {
        this.accessPointRole = accessPointRole;
    }

    public Double getThresholdInterval() {
        return thresholdInterval;
    }

    public void setThresholdInterval(Double thresholdInterval) {
        this.thresholdInterval = thresholdInterval;
    }
}
