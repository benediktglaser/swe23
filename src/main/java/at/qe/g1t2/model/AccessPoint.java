package at.qe.g1t2.model;

import jakarta.persistence.*;

import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;
import org.springframework.data.domain.Persistable;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

/**
 * Entity presenting a AccessPoint.
 * <p>
 * The Id is being autogenerated and has a UUID datatype. This class serves the purpose of managing the intersection between
 * SensorStations and Webserver.
 */

@Entity
public class AccessPoint implements Persistable<String>, Serializable, Comparable<AccessPoint> {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private String id;

    @Temporal(TemporalType.TIMESTAMP)
    private LocalDateTime createDate;

    private Boolean connected;

    private Boolean enabled;

    private Double intervall;

    @Temporal(TemporalType.TIMESTAMP)
    private LocalDateTime updateDate;

    public LocalDateTime getUpdateDate() {
        return updateDate;
    }

    public void setUpdateDate(LocalDateTime updateDate) {
        this.updateDate = updateDate;
    }

    @OneToMany(mappedBy = "accessPoint", fetch = FetchType.EAGER, cascade = CascadeType.MERGE)
    @OnDelete(action = OnDeleteAction.CASCADE)
    private List<SensorStation> sensorStation = new ArrayList<>();

    public Double getIntervall() {
        return intervall;
    }

    public void setIntervall(Double intervall) {
        this.intervall = intervall;
    }

    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    public Boolean getConnected() {
        return connected;
    }

    public void setConnected(Boolean connected) {
        this.connected = connected;
    }

    public List<SensorStation> getSensorStation() {
        return sensorStation;
    }

    public void setSensorStation(List<SensorStation> sensorStation) {
        this.sensorStation = sensorStation;
    }

    private String accessPointName;

    public String getAccessPointID() {
        return id;
    }

    public void setAccessPointID(String accessPointID) {
        this.id = accessPointID;
    }

    public String getAccessPointName() {
        return accessPointName;
    }

    public void setAccessPointName(String accessPointName) {
        this.accessPointName = accessPointName;
    }

    public LocalDateTime getCreateDate() {
        return createDate;
    }

    public void setCreateDate(LocalDateTime createDate) {
        this.createDate = createDate;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AccessPoint that = (AccessPoint) o;
        return Objects.equals(id, that.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public String getId() {
        return getAccessPointID();
    }

    public void setId(String id) {
        this.id = id;
    }

    @Override
    public boolean isNew() {
        return (null == createDate);
    }

    @Override
    public int compareTo(AccessPoint o) {
        return this.id.toString().compareTo(Objects.requireNonNull(o.getId()).toString());
    }
}
